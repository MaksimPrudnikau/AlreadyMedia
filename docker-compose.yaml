services:
  api:
    build:
      context: .
      dockerfile: AlreadyMedia/Dockerfile
    environment:
      - ASPNETCORE_URLS=http://+:5040
      - ASPNETCORE_ENVIRONMENT=Development
      - ConnectionStrings__Postgres=User Id=postgres;Password=maksim2001;Server=postgres;Port=5432;Database=already-media;
      - ConnectionStrings__Redis=redis:6379
      - NasaDataset__SourceUrl=https://raw.githubusercontent.com/biggiko/nasa-dataset/refs/heads/main/y77d-th95.json
      - NasaDataset__SyncIntervalSeconds=30
      - FrontendUrl=http://localhost:5173
    ports:
      - "5040:5040"
    depends_on:
      - postgres
      - redis
  
  frontend:
    build:
      context: ./Frontend
      dockerfile: Dockerfile
    depends_on:
      - api
    ports:
      - "5173:5173"
  
  worker:
    build:
      context: .
      dockerfile: NasaClientService/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ConnectionStrings__Postgres=User Id=postgres;Password=maksim2001;Server=postgres;Port=5432;Database=already-media;
      - ConnectionStrings__Redis=redis:6379
      - NasaDataset__SourceUrl=https://raw.githubusercontent.com/biggiko/nasa-dataset/refs/heads/main/y77d-th95.json
      - NasaDataset__SyncIntervalSeconds=30
      - DB_MAX_RETRY_ATTEMPTS=15
      - DB_RETRY_DELAY_SECONDS=5
      - DB_CONNECT_TIMEOUT=30
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "dotnet", "NasaClientService.dll", "healthcheck" ]
      interval: 10s
      timeout: 5s
      retries: 5

  postgres:
    image: postgres:latest
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: maksim2001
      POSTGRES_DB: already-media
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres -d already-media" ]
      interval: 5s
      timeout: 5s
      retries: 15
      start_period: 10s

  redis:
    image: redis:latest
    ports:
      - "6379:6379"
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 10s

volumes:
  postgres_data: